// // 实现任务列表的新增、删除、全选、选中的功能

import {useState} from 'react'
import { useStore } from './store/index' // 1、引入store的总模块文件
import { observer } from "mobx-react-lite" // 2、导入中间件链接mobx、react，完成响应式变化
import './study/Mobx/todo.css'
import { v4 as uuid} from 'uuid'

function App() {
    const { todoStore } = useStore()
    
    // 单选受控：通过mobx的store去维护状态，input只需要把e.target.value交给store进行修改
    function onChange(id, e) {
        todoStore.singleCheck(id, e.target.checked)
    }
    // 全选操作
    function allChange(e) {
        todoStore.allCheck(e.target.checked) // 把修改值传给store中的方法
    }
    // 删除
    function delTodo(id) {
        todoStore.delTodo(id)
    }
    // 新增
    const [todo, setTodo] = useState('')
    function addTodo(e) {
        if (e.keyCode === 13) {
            todoStore.addTodo(
                {
                    id: uuid(),
                    content: todo,
                    isDone: false
                }
            )
            setTodo('') // 把输入框置空
        }
    }
    return (
        <div className='box'>
            <div className='title'>todos</div>
            <div className='form'>
                <div className='form-content'>
                    <div className='form-content-top'>
                        <div className='icon' >
                            <input type='checkbox'
                                checked={todoStore.isAll}
                                onChange={allChange}
                            />
                        </div>
                        <div className='input'>
                            <input value={todo} onKeyUp={addTodo} onChange={(e)=>setTodo(e.target.value)} type='text' placeholder="What needs to be done?" />
                        </div>
                    </div>
                    <ul className='form-content-moddle'>
                        {todoStore.list.map(item => 
                            <li className={item.isDone ? 'compeleted' : 'item'}
                                key={item.id}
                            >
                                <div className='checkRdio'>
                                    <input type='checkbox' checked={item.isDone} onChange={(e)=>onChange(item.id, e)} />
                                </div>
                                <div className='item-content'>{item.content}</div>
                                <button className='delete'
                                    onClick={() => delTodo(item.id)}
                                >x</button>
                            </li>     
                        )}
                    </ul>
                    <div className='form-content-bottom'>
                        <div className='total'>任务列表{todoStore.list.length}，已完成{todoStore.compeletedNum}</div>
                    </div>
                </div>
            </div>
        </div>
    )
}

// 3、用observer方法包裹组件名
export default observer(App)